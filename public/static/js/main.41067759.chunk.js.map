{"version":3,"sources":["smallpanda.jpg","nav.js","Home.js","Employee.js","Employer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","to","FigureImage","src","panda","height","Home","variant","Employee","useState","music","setMusic","stress","setStress","cleanliness","setCleanliness","message","setMessage","className","Form","Label","class","questions","value","onChange","e","target","onChnage","Button","onClick","body","JSON","stringify","userId","fetch","method","headers","then","res","status","catch","err","toString","Employer","total","setTotal","useEffect","json","percentage","toFixed","console","log","count","label","color","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41067759.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smallpanda.fc9ed023.jpg\";","import React from 'react'\nimport './nav.css'\nimport FigureImage from 'react-bootstrap/FigureImage'\nimport panda from './smallpanda.jpg';\nimport { Link } from 'react-router-dom'\n\nexport function Nav ()\n{\n    return(\n        <nav>\n            <Link to=\"/\"><FigureImage src={panda} height={140}/></Link>\n        </nav>\n    )\n}\n\n","import React from 'react';\nimport { Jumbotron, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Nav } from './nav'\n\nexport function Home() {\n    return (\n        <div>\n        <Nav />\n        <p>\n          Choose the link that applies to you\n        </p>\n        <p>\n          <Link variant=\"primary\" to=\"/employee\">Employee</Link>\n        </p>\n        <p>\n          <Link variant=\"primary\" to=\"/employer\">Employer</Link>\n        </p>\n      </div>\n    )\n}","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport \"./employee.css\"\nimport { Button } from 'react-bootstrap';\nimport { Nav} from './nav'\n\nexport function Employee() {\n    const [music, setMusic] = useState(3)\n    const [stress, setStress] = useState(3)\n    const [cleanliness, setCleanliness] = useState(3)\n    const [message, setMessage] = useState('')\n\n    function handleMusic(e)\n    {\n        setMusic(e.target.value)\n    }\n\n    function handleStress(e)\n    {\n        setStress(e.target.value)\n    }\n\n    function handleClean(e)\n    {\n        setCleanliness(e.target.value)\n    }\n\n    function handleSubmit()\n    {\n        const body = JSON.stringify({\n            userId: 1,\n            music: music,\n            stress: stress,\n            cleanliness: cleanliness\n        })\n\n        fetch('http://52.63.127.93:3000/surveys/new', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: body\n        })\n        .then((res) => {\n            if (res.status === 200){\n                setMessage('Successfully submited!!')\n            }\n            else {\n                setMessage(res.status)\n            }\n        })\n        .catch((err) => {\n            setMessage(err.toString())\n        })\n    }\n\n    return (\n        <div className=\"employee\">\n            <Nav />\n            <Form>\n                <Form.Label class=\"qs\">{questions[0]}</Form.Label>\n                <input value={music} onChange={handleMusic}/> (1-5)<br />\n                <Form.Label class=\"qs\">{questions[1]}</Form.Label>\n                <input value={stress} onChnage={handleStress}/> (1-5)<br />\n                <Form.Label class=\"qs\">{questions[2]}</Form.Label>\n                <input value={cleanliness} onChange={handleClean} /> (1-5)<br />\n            </Form>\n            <Button variant=\"primary\" onClick={handleSubmit}>Submit</Button>\n            <p>{message}</p>\n        </div>\n    )\n}\n\n\nconst options = [\n    \"1 - Very bad\",\n    \"2 - Kinda bad\",\n    \"3 - Alright\",\n    \"4 - Pretty Good\",\n    \"5 - Excellent\"\n]\n\nconst questions = [\n    \"How did you like the music today?\",\n    \"Was today a bit stressful?\",\n    \"Do you think your work environment was clean?\"\n]","import React, { useState, useEffect } from 'react';\nimport Gauge from 'react-svg-gauge';\nimport './employer.css'\nimport { Nav } from './nav' \n\nexport function Employer() {\n    const [music, setMusic] = useState(50);\n    const [stress, setStress] = useState(50);\n    const [cleanliness, setCleanliness] = useState(50);\n    const [total, setTotal] = useState(0);\n\n    useEffect(() => {\n        fetch('http://52.63.127.93:3000/surveys/music', { method: 'GET' })\n            .then((res) => {\n                return res.json()\n            })\n            .then((res) => {\n                setMusic((res.percentage * 100).toFixed(1))\n            })\n            .catch((err) => {\n                console.log(err.toString())\n            })\n\n        fetch('http://52.63.127.93:3000/surveys/stress', { method: 'GET' })\n            .then((res) => {\n                return res.json()\n            })\n            .then((res) => {\n                setStress((res.percentage * 100).toFixed(1))\n            })\n            .catch((err) => {\n                console.log(err.toString())\n            })\n\n        fetch('http://52.63.127.93:3000/surveys/cleanliness', { method: 'GET' })\n            .then((res) => {\n                return res.json()\n            })\n            .then((res) => {\n                setCleanliness((res.percentage * 100).toFixed(1))\n            })\n            .catch((err) => {\n                console.log(err.toString())\n            })\n        \n            fetch('http://52.63.127.93:3000/surveys/total', { method: 'GET' })\n            .then((res) => {\n                return res.json()\n            })\n            .then((res) => {\n                setTotal(res.count)\n            })\n            .catch((err) => {\n                console.log(err.toString())\n            })\n    })\n\n    return (\n        <div>\n            <Nav />\n            <h2>Insight From {total} Employees</h2>\n            <Gauge value={music} label=\"Shift Sentiment\" color=\"#359CBF\"/>\n        <Gauge value={stress} label=\"Workload Perception\" color=\"#FE9400\"/>\n        <Gauge value={cleanliness} label=\"Support Perception\" color=\"#92C731\"/>\n        <h2>Employee Insight From This Month</h2>\n            <Gauge value={56.2} label=\"Shift Sentiment\" color=\"#3182D6\"/>\n        <Gauge value={88.5} label=\"Workload Perception\" color=\"#E8A20C\"/>\n        <Gauge value={44.7} label=\"Support Perception\" color=\"#DEDE2C\"/>\n        </div>\n    )\n}","import React from 'react';\nimport { Home } from './Home';\nimport { Employee } from './Employee';\nimport { Employer} from './Employer';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/employee\" component={Employee}/>\n        <Route path=\"/employer\" component={Employer}/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}