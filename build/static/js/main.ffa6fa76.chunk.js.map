{"version":3,"sources":["components/buttons.js","components/containers.js","pages/welcome.js","api/api.js","components/formElements.js","pages/register.js","pages/login.js","components/text.js","pages/dash.js","components/logo.js","components/status.js","pages/question.js","pages/about.js","pages/docs.js","pages/contact.js","App.js","serviceWorker.js","index.js"],"names":["LinkedButton","link","text","display","to","className","ActionButton","action","onClick","SpinnerButton","NavButton","GroupedActionButtons","actions","texts","class","map","i","CardWLogoSm","child","CardWLogoMd","Welcome","props","content","devUrl","post","route","body","url","axios","get","StyledLabel","StyledInput","value","setValue","type","placeholder","onChange","e","target","Register","useState","email","setEmail","password","setPassword","name","setName","firstName","setFirstName","inudstry","setIndustry","code","setCode","submitted","error","message","submission","setSubmission","toHome","setToHome","submissionLoading","setSubmissionLoading","form","a","async","params","setTimeout","response","data","success","Login","res","setSigned","setToken","token","setCompanyId","companyId","BigLeftHeading","NumberDisplay","number","colour","Dash","measures","setMeasures","averages","setAverages","setSuccess","loading","setLoading","useEffect","console","log","apiCall","chart","src","alt","employeeMode","setEmployeeMode","loadingScreen","successScreen","measure","key","errorScreen","LeftHeading","Status","logged","logout","not","user","Questionnaire","questions","setQuestions","array","answers","setAnswers","ready","setReady","currentq","setCurrentq","setError","payload","id","submitQuestions","question","loadQuestions","answerChoices","answerActions","choice","length","questionText","employerMode","questionPage","renderChild","About","about","Docs","docs","Contact","contact","href","App","signed","stateProps","states","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffa6fa76.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\n//This button redirects to a new page\nexport function LinkedButton ({link, text}){\n    return (\n        <Link display=\"block\" to={link}><button className=\"mx-4 my-4 bg-teal-500 hover:bg-teal-600 active:bg-teal-700 text-white font-semibold py-2 px-4 border border-grey-400 rounded shadow\">{text}</button></Link>\n    )\n}\n\n//This button runs a given action(function) on click\nexport function ActionButton ({action, text}){\n    return (\n        <button className=\"mx-4 my-4 bg-teal-500 hover:bg-teal-600 active:bg-teal-700 text-white font-semibold py-2 px-4 border border-grey-400 rounded shadow\"\n        onClick={action}>{text}</button>\n    )\n}\n\nexport function SpinnerButton (){\n    return (\n        <button className=\"mx-4 my-4 bg-teal-700 text-white font-semibold py-2 px-4 border border-grey-400 rounded shadow\">Loading!</button>\n    )\n}\n\n//Links to pages on the navbar\nexport function NavButton ({link, text}) {\n    return (\n        <Link display=\"inline-block\" to={link}><button className=\"inline-block text-teal-200 hover:text-white mr-4\">{text}</button></Link>\n    )\n}\n\n//produce a grouped set of buttons that feed different params into an action\nexport function GroupedActionButtons ({actions, texts}) {\n    return (\n        <div class=\"flex justify-center py-5 px-2\">\n            {actions.map((action, i) => {\n                return <button class=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 mx-2 rounded-l\" onClick={action}>{texts[i]}</button>\n            })}\n        </div>\n    )\n}","import React from 'react'\n\n//renders a centered card component with survey panda logo, size small\nexport function CardWLogoSm({child}) {\n    return (\n        <div className=\"inline-block w-full max-w-sm rounded bg-gray-100 overflow-hidden shadow-lg text-center mt-5\">\n            <div className=\"px-10 py-5\">{child}</div>\n        </div>\n    )\n}\n\n//a medium-lg sized card component for dashboard and questionnaire\nexport function CardWLogoMd({child}) {\n    return (\n        <div className=\"inline-block max-w-full rounded bg-gray-100 overflow-hidden shadow-lg text-center mt-5\">\n            <div className=\"px-10 py-5\">{child}</div>\n        </div>\n    )\n}","import React from 'react'\nimport { LinkedButton } from '../components/buttons'\nimport { CardWLogoSm } from '../components/containers'\n\nexport function Welcome(props) {\n    const content = <div>\n            <div className=\"py-8 px-4\">\n                <p className=\"py-2\">Employees are your most important asset</p>\n                <p className=\"py-2\">Keeping them engaged make them more productive and reduces attrition, saving you time and money usually spend on hiring</p>\n                <p className=\"py-2\">Let's get your free trial started</p>\n            </div>\n            <div>\n                <LinkedButton link=\"/register\" text=\"Register\" />\n            </div>\n    </div>\n    \n    return <CardWLogoSm child={content} />\n}","import axios from 'axios'\n\n//const apiUrl = \"http://52.63.127.93:3000/\"\nconst devUrl = \"https://surveypandaa.appspot.com/\"\n\nexport function post(route, body) {\n    const url = devUrl + route\n    return axios.post(url, body)\n}\n\nexport function get(route) {\n    const url = devUrl + route\n    return axios.get(url)\n}","import React from 'react'\n\nexport const StyledLabel = (props) => <div className=\"text-gray-700 font-bold mb-1 text-left\">{props.text}</div>\n\nexport const StyledInput = ({value, setValue, type, placeholder}) => <div className=\"block\">\n        <input \n            className=\"appearance-none w-full text-gray-700 border rounded py-3 px-4 mb-6 leading-tight focus:outline-none focus:border-teal-500\" \n            value={value} \n            onChange={(e) => setValue(e.target.value)} \n            placeholder={placeholder}\n            type={type}/>\n    </div>","import React, { useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { post } from '../api/api'\nimport { ActionButton, SpinnerButton } from '../components/buttons'\nimport { CardWLogoMd } from '../components/containers'\nimport { StyledLabel, StyledInput } from '../components/formElements'\n\n\nexport function Register(props) {\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [firstName, setFirstName] = useState(\"\")\n    const [inudstry, setIndustry] = useState(\"\")\n    const [code, setCode] = useState(\"\")\n    const [submission, setSubmission] = useState({ submitted: false, error: null, message: null })\n    const [toHome, setToHome] = useState(false)\n    const [submissionLoading, setSubmissionLoading] = useState(false)\n\n    async function submit() {\n        const params = {\n            email: email,\n            password: password,\n            name: name,\n            inudstry: inudstry,\n            firstName: firstName,\n            code: code\n        }\n        try {\n            setSubmissionLoading(true)\n            const res = await post('user/new', params)\n            setSubmissionLoading(false)\n            setSubmission({\n                submitted: true,\n                error: false,\n                message: null\n            })\n            setTimeout(() => {\n                setToHome(true)\n            }, 5000)\n        }\n        catch (err) {\n            setSubmission({\n                submitted: true,\n                error: true,\n                message: err.response.data ? err.response.data : \"Error connecting to backend\"\n            })\n            setTimeout(() => {\n                setSubmission({\n                    submitted: false,\n                    error: null,\n                    message: null\n                })\n            }, 5000)\n        }\n    }\n\n    const form = <div className=\"w-full\">\n            <StyledLabel text=\"Email\" />\n            <StyledInput value={email} setValue={setEmail} />\n\n            <StyledLabel text=\"Password\" />\n            <StyledInput value={password} type=\"password\" setValue={setPassword} />\n            <div className=\"flex md:block\">\n                <div className=\"inline-block pr-2\">\n                    <StyledLabel text=\"Company Name\" />\n                    <StyledInput value={name} setValue={setName}/>\n                </div>       \n                <div className=\"inline-block pl-2\">\n                    <StyledLabel text=\"Company Industry\" />\n                    <StyledInput value={inudstry} setValue={setIndustry} />\n                </div>\n            </div>\n            \n            <div className=\"flex md:block\">\n                <div className=\"inline-block pr-2\">\n                    <StyledLabel text=\"First Name\" />\n                    <StyledInput value={firstName} setValue={setFirstName} />\n                </div>\n                <div className=\"inline-block pl-2\">\n                    <StyledLabel text=\"Invitation Code\" />\n                    <StyledInput value={code} setValue={setCode} />\n                </div>\n            </div>\n            \n            {submissionLoading ? <SpinnerButton /> : <ActionButton action={submit} text=\"submit\" />}\n    </div>\n\n    const success = toHome ? <Redirect to=\"/\" /> : <h2>Success! Verify your email before logging in, don't forget to check your spam folder!</h2>\n\n    const error = <div><h2>Error! redirecting back in 5 seconds...</h2><p>Server side response:{submission.message}</p></div>\n\n    if (!submission.submitted) {\n        return <CardWLogoMd child={form} />\n    }\n    else if (submission.submitted && !submission.error) {\n        return <CardWLogoMd child={success} />\n    }\n    else {\n        return <CardWLogoMd child={error} />\n    }\n}","import React, { useState } from 'react'\nimport { post } from '../api/api'\nimport { Redirect } from 'react-router-dom'\nimport { StyledLabel, StyledInput } from '../components/formElements'\nimport { ActionButton } from '../components/buttons'\nimport { CardWLogoSm } from '../components/containers'\n\nexport function Login(props) {\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [submission, setSubmission] = useState({\n        success: false,\n        message: null\n    })\n    const [toHome, setToHome] = useState(false)\n\n    const submit = async () => {\n        const body = {\n            email: email,\n            password: password\n        }\n        try {\n            const res = await post('user/login', body)\n            setSubmission({\n                success: true,\n                message: null\n            })\n            props.setSigned(true)\n            props.setEmail(body.email)\n            props.setToken(res.data.token)\n            props.setCompanyId(res.data.companyId)\n            setTimeout(() => setToHome(true), 1500)\n        }\n        catch (err) {\n            if (err.response){\n                setSubmission({\n                    success: false,\n                    message: err.response.data.message\n                })\n            }\n            else {\n                setSubmission({\n                    success: false,\n                    message: err.message\n                })\n            }\n        }\n\n    }\n\n    const form = <div>\n            <StyledLabel text=\"Email Address\" />\n            <StyledInput value={email} setValue={setEmail} placeholder=\"Email\"/>\n\n            <StyledLabel text=\"Password\" />\n            <StyledInput type=\"password\" value={password} setValue={setPassword} placeholder=\"Password\" />\n\n            <ActionButton action={submit} text=\"Log In\" />\n            {submission.success ? <p>Log in success!</p> : <p>{submission.message}</p>}\n    </div>\n\n    return toHome ? <Redirect to=\"/\" /> : <CardWLogoSm child={form} />\n}","import React from 'react'\n\nexport function BigLeftHeading({text}){\n    return <h1 className=\"text-left text-teal-500 font-bold text-xl mb-8\">{text}</h1>\n}\n\n//renders a rounded circle with the number displayed in the centre, coloured based on the number, only accepts 1-5\nexport function NumberDisplay({number}){\n    //FIX ME: colours look horrendous!!\n    const colour = number > 4 ? 'bg-teal-800': number > 2 ? 'bg-teal-600': 'bg-teal-400'\n    return <div className = {`inline-flex rounded-full h-12 w-12 items-center justify-center text-white ${colour}`}>{number}</div>\n}","import React, { useState, useEffect } from 'react'\nimport { get } from '../api/api'\nimport { CardWLogoMd } from '../components/containers'\nimport { BigLeftHeading, NumberDisplay } from '../components/text'\nimport { ActionButton } from '../components/buttons'\n\nexport function Dash(props){\n    const [measures, setMeasures] = useState([])\n    const [averages, setAverages] = useState([])\n    const [success, setSuccess] = useState(false)\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        const apiCall = async (route) => {\n            try {\n                const res = await get(route)\n                setLoading(false)\n                setSuccess(true)\n                console.log(res)\n                if (res.data === \"No results yet!\"){\n                    setMeasures([\"No Data\",\"No Data\",\"No Data\"])\n                    setAverages([0, 0, 0])\n                }\n                else {\n                    setMeasures(res.data.measures)\n                    setAverages(res.data.averages)\n                }\n            }\n            catch (err) {\n                setLoading(false)\n                console.log(err.message)\n            }\n        }\n        apiCall(`search/week?id=${props.companyId}`)\n    },[props.companyId])\n\n    const chart = <img className=\"inline-block px-10\" src=\"https://via.placeholder.com/300\" alt=\"placeholder for chart\"/>\n\n    //button that switches to employee mode\n    const employeeMode = <ActionButton action={() => props.setEmployeeMode(true)} text=\"Questionnaire\" />\n\n    //loading screen\n    const loadingScreen = <h1>Fetching insights, sit tight!</h1>\n\n    //dashboard on successful data fetching\n    const successScreen = <div>\n        <BigLeftHeading text={`Your Dashboard`} />\n        <div className=\"flex align-center\">\n            {chart}\n            <ul className=\"inline-flex flex-col justify-center px-10\">{measures.map((measure, i) => <li className=\"text-left py-5\" key={measure}><NumberDisplay number={averages[i]}/><p className=\"ml-10 inline-block\">{measure}</p></li>)}</ul>\n        </div>\n        <div className=\"block py-10\">{employeeMode}</div>\n    </div>\n\n    //error display\n    const errorScreen = <h1>Error fetching</h1>\n\n    if (loading && !success) {\n        return <CardWLogoMd child={loadingScreen} />\n    }\n    else if (!loading && success) {\n        return <CardWLogoMd child={successScreen} />\n    }\n    else return <CardWLogoMd child={errorScreen} />\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\n//This is the defaul heading\nexport default function logoHeading() {\n    return <Link to=\"/\"><h1 className=\"bg-teal-500 py-2 text-white text-2xl font-bold font-sans\" >SurveyPanda</h1></Link>\n}\n\n//left aligned version\nexport function LeftHeading() {\n    return <Link to=\"/\"><h1 className=\"text-left px-10 bg-teal-500 py-2 text-white text-2xl font-bold font-sans\" >SurveyPanda</h1></Link>\n}","import React from 'react'\nimport { LeftHeading } from './logo'\nimport { ActionButton, LinkedButton, NavButton } from './buttons'\n\nexport function Status(props) {\n    const logged = <div className=\"text-white\">\n        <ActionButton action={props.logout} text=\"Log Out\" />\n    </div>\n\n    const not = <LinkedButton link=\"/login\" text=\"Log In\" />\n    const user = props.email ? logged : not\n\n    return <nav className=\"flex items-center justify-between flex-wrap bg-teal-500 p-2\">\n        <div className=\"inline-flex justify-start\">\n            <div className=\"flex items-center justify-start\">\n                <LeftHeading />\n            </div>\n            <div className=\"hidden lg:flex md:items-center md:justify-start md:w-auto\">\n                    <NavButton text=\"about\" link=\"/about\" /> \n                    <NavButton text=\"contact\" link=\"/contact\" />\n                    <NavButton text=\"docs\" link=\"/docs\" />\n            </div>\n        </div>\n        <div className=\"flex items-center justify-end\">\n            {user}\n        </div>\n    </nav>\n}","import React, { useState, useEffect } from 'react'\nimport { get, post } from '../api/api'\nimport { GroupedActionButtons, ActionButton } from '../components/buttons'\nimport { CardWLogoMd } from '../components/containers'\n\nexport function Questionnaire(props){\n    const [questions, setQuestions] = useState([])\n    const [answers, setAnswers] = useState({ array: [] })\n    const [ready, setReady] = useState(false)\n    //Index of question array\n    const [currentq, setCurrentq] = useState(0)\n    const [success, setSuccess] = useState(false)\n    const [error, setError] = useState(false)\n\n    //fires the post request event if ready\n    useEffect(() => {\n        const submitQuestions = async () => {\n            try{\n                const payload = {\n                    answers: answers.array,\n                    id: props.companyId\n                }\n                setReady(false)\n                const res = await post('question/answer', payload)\n                console.log(res)\n                setSuccess(true)\n                setTimeout(() => {\n                    setAnswers({ array: [], ready: false })\n                    setCurrentq(0)\n                    setReady(false)\n                    setSuccess(false)\n                }, 3000)\n            }\n            catch(err){\n                console.log(err)\n                setError(true)\n                setTimeout(() => {\n                    setAnswers({ array: [], ready: false })\n                    setCurrentq(0)\n                    setError(false)\n                }, 3000)\n            }\n        }\n        if (ready){\n            submitQuestions()\n        }\n    },[props.companyId, answers, ready])\n\n    //fetches questions on render\n    useEffect(() => {\n        const loadQuestions = async () => {\n            try {\n                const res = await get(`question/today?id=${props.companyId}`)\n                console.log(res)\n                setQuestions(res.data.questions.map((question) => question.text))\n            }\n            catch (err) {\n                console.log(err.message)\n            }\n        }\n        loadQuestions()\n    }, [props.companyId])\n\n    //stores answer in the answers array, and advance to the next question\n    //If current question is the last one then submit answers\n    const answer = (choice) => {\n        setAnswers({ array: [...answers.array, choice] })\n        if (currentq === questions.length - 1){\n            setReady(true)\n        }\n        else {\n            setCurrentq(currentq + 1)\n        }\n    }\n\n    const answerChoices = [1, 2, 3, 4, 5]\n\n    const answerActions = answerChoices.map((choice) => {\n        return () => {\n            setAnswers({ array: [...answers.array, choice] })\n            if (currentq === questions.length - 1){\n                setReady(true)\n            }\n            else {\n                setCurrentq(currentq + 1)\n            }\n        }\n    })\n\n    //text of current question\n    const questionText = <h1>{questions[currentq]}</h1>\n\n    const switchMode = () => props.setEmployeeMode(false)\n\n    //button that switches to employer mode\n    const employerMode =  <ActionButton action={switchMode} text=\"Dashboard\" />\n\n    //load this for individual questions\n    const questionPage = <div>\n        {questionText}\n        <GroupedActionButtons actions={answerActions} texts={answerChoices} />\n        {employerMode}\n    </div>\n\n\n\n    const renderChild = success ? <h1>Success!</h1> : error ? <h1>Error!</h1> : questionPage\n\n    return <CardWLogoMd child={renderChild} />\n} ","import React from 'react'\nimport { CardWLogoSm } from '../components/containers'\n\nexport function About(){\n    const about = <div>\n        <div>\n            <h1>The team</h1>\n            <p>Content Content Content</p>\n        </div>\n        <div>\n            <h1>Our vision</h1>\n            <p>Content Content Content</p>\n        </div>\n    </div>\n\n    return <CardWLogoSm child={about}/>\n}","import React from 'react'\nimport { CardWLogoSm } from '../components/containers'\n\nexport function Docs(){\n    const docs = <h1>Docs</h1>\n    return <CardWLogoSm child={docs}/>\n}","import React from 'react'\nimport { CardWLogoSm } from '../components/containers'\n\nexport function Contact(){\n    const contact = <div>\n        <h1>Contact</h1>\n        <a href=\"https://github.com/frankisawesome\">Frank Li's github</a>\n        </div>\n    return <CardWLogoSm child={contact}/>\n}","import React, { useState } from 'react'\nimport { Welcome } from './pages/welcome'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"\nimport { Register } from './pages/register'\nimport { Login } from './pages/login' \nimport { Dash } from './pages/dash'\nimport { Status } from './components/status'\nimport { Questionnaire } from './pages/question'\nimport { About } from './pages/about'\nimport { Docs } from './pages/docs'\nimport { Contact } from './pages/contact'\n\n\nfunction App() {\n  const [signed, setSigned] = useState(false)\n  const [email, setEmail] = useState(\"\")\n  const [token, setToken] = useState(\"\")\n  const [companyId, setCompanyId] = useState(\"\")\n  const [employeeMode, setEmployeeMode] = useState(false)\n\n  const stateProps = {\n    setSigned: setSigned,\n    setEmail: setEmail,\n    setToken: setToken,\n    setCompanyId: setCompanyId,\n    setEmployeeMode: setEmployeeMode\n  }\n  \n  const states = {\n    signed: signed,\n    email: email,\n    token: token,\n    companyId: companyId,\n    employeeMode: employeeMode,\n    logout: () => {\n      setEmail(\"\")\n      setToken(\"\")\n      setCompanyId(\"\")\n      setSigned(false)\n    }\n  }\n\n  return (\n    <div className=\"w-full min-h-screen font-mono text-center\">\n      <Router>\n      <Status {...states} />\n      <Switch>\n        <Route path=\"/register\">\n          <Register {...stateProps}/>\n        </Route>\n        <Route path=\"/login\">\n          <Login {...stateProps}/>\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/docs\">\n          <Docs />\n        </Route>\n        <Route path=\"/contact\">\n          <Contact />\n        </Route>\n        <Route exact path=\"/\">\n          {signed ? employeeMode ? <Questionnaire {...states} {...stateProps} /> : <Dash {...states} {...stateProps}/> : <Welcome />}\n        </Route>\n      </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/tailwind.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}